import streamlit as st
from datetime import datetime
import repositories.flights
import pandas as pd
import logging
import asyncio
from services.book import BookingService

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

if "booked_flights" not in st.session_state:
    st.session_state.booked_flights = pd.DataFrame(columns=["–†–µ–π—Å", "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"])

async def get_cities(pool) -> list[str]:
    try:
        print("–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤")
        cities = await repositories.flights.get_cities(pool)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if not cities:
            st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return []
        
        return [city["city"] for city in cities]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–æ–≤: {e}")
        st.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤.")
        return []

async def get_airports(pool, city: str) -> list[str]:
    try:
        print(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city}")
        airports = await repositories.flights.get_airports(pool, city)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if not airports:
            st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞—ç—Ä–æ–ø–æ—Ä—Ç—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}.")
            return []
        
        return [airport["name"] for airport in airports]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}: {e}")
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}.")
        return []


async def search_flights(pool, departure_airport: str, arrival_airport: str, departure_date: datetime.date) -> list[dict]:
    try:
        print(f"–ü–æ–∏—Å–∫ —Ä–µ–π—Å–æ–≤ –∏–∑ {departure_airport} –≤ {arrival_airport} –Ω–∞ {departure_date}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≥–æ—Ä–æ–¥–∞ –∏ –∞—ç—Ä–æ–ø–æ—Ä—Ç—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç
        if departure_airport == arrival_airport:
            st.warning("–ê—ç—Ä–æ–ø–æ—Ä—Ç –≤—ã–ª–µ—Ç–∞ –∏ –ø—Ä–∏–ª–µ—Ç–∞ –Ω–µ –º–æ–≥—É—Ç —Å–æ–≤–ø–∞–¥–∞—Ç—å!")
            return []
        
        flights = await repositories.flights.search_flights(pool, departure_airport, arrival_airport, departure_date)
        
        return flights
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ–π—Å–æ–≤: {e}")
        st.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ–π—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return []

def clear_table_event():
    st.session_state.booked_flights = pd.DataFrame(
        columns=["–†–µ–π—Å", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"]
    )


def book_flight(flight_id, user_id):
    new_row = pd.DataFrame(
        {
            "–†–µ–π—Å": [flight_id],
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å": [user_id]
        }
    )
    st.session_state.booked_flights = pd.concat(
        [st.session_state.booked_flights, new_row], ignore_index=True
    )

async def upload_sales(booked_flights: pd.DataFrame, pool):
    booking_date = datetime.now()
    await BookingService().process_sale(
        booking_date,
        booked_flights,
        pool,
    )




async def show_flight_search_and_booking_page(pool, user_id):
    cities = await get_cities(pool)
    st.title("–ü–æ–∏—Å–∫ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–π—Å–æ–≤")

    # –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –≤—ã–ª–µ—Ç–∞
    departure_city = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞", cities, key="departure_city")
    departure_airports = await get_airports(pool, departure_city)
    departure_airport = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç –≤—ã–ª–µ—Ç–∞", departure_airports, key="departure_airport")

    # –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    arrival_cities = [city for city in cities if city != departure_city]
    arrival_city = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è", arrival_cities, key="arrival_city")
    arrival_airports = await get_airports(pool, arrival_city)
    arrival_airport = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è", arrival_airports, key="arrival_airport")

    # –í—ã–±–æ—Ä –¥–∞—Ç—ã –≤—ã–ª–µ—Ç–∞
    departure_date = st.date_input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ª–µ—Ç–∞", key="departure_date")
    flights = await search_flights(pool, departure_airport, arrival_airport, departure_date)
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–π—Å–æ–≤
    if st.button("–ü–æ–∏—Å–∫ —Ä–µ–π—Å–æ–≤"):
        if flights:
            st.write("–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ–π—Å—ã:")
            st.subheader(f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–π—Å–æ–≤: {len(flights)}")
            
            for flight in flights:
                container = st.container(border=True)
                container.markdown(f"### –†–µ–π—Å {flight['flight_id']} | {flight['airline_name']}")
                
                col1, col2, col3 = container.columns(3)
                
                with col1:
                    st.markdown("**–í—ã–ª–µ—Ç:**")
                    st.markdown(f"üè¢ {flight['departure_airport_name']}")
                    st.markdown(f"üïí {pd.to_datetime(flight['departure_time']).strftime('%H:%M %d.%m.%Y')}")
                
                with col2:
                    st.markdown("**–ü—Ä–∏–ª—ë—Ç:**")
                    st.markdown(f"üè¢ {flight['arrival_airport_name']}")
                    st.markdown(f"üïí {pd.to_datetime(flight['arrival_time']).strftime('%H:%M %d.%m.%Y')}")
                
                with col3:
                    st.markdown(f"üí∞ –¶–µ–Ω–∞: {flight['price']} —Ä—É–±.")
                    st.markdown(f"‚úàÔ∏è –°–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞: {flight['number_seats']}")
        else:
            st.write("–†–µ–π—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

    flight_ids = [flight['flight_id'] for flight in flights]
    selected_flight= st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–π—Å", flight_ids)
    add_flight_btn = st.button("–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–π—Å –≤ –∫–æ—Ä–∑–∏–Ω—É")

    clear_table_btn = st.button("–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
    apply_btn = st.button("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –±–∏–ª–µ—Ç—ã")
    if add_flight_btn:
        book_flight(selected_flight, user_id)
    if clear_table_btn:
        clear_table_event()
    if apply_btn and not st.session_state.booked_flights.empty:
        await upload_sales(st.session_state.booked_flights, pool)
        #repositories.flights.decrement_seat_count(selected_flight)
        st.success("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –±—Ä–æ–Ω—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'")
        clear_table_event()

    st.write("–ö–æ—Ä–∑–∏–Ω–∞:")
    st.dataframe(st.session_state.booked_flights)

    if st.button("–í—ã—Ö–æ–¥"):
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
        st.session_state['user'] = None
        st.session_state['page'] = 'login'
        st.rerun()
